group 'com.luxoft'
version rootProject.version

ext.grpcVersion = '1.1.2'

apply plugin: 'com.google.protobuf'
apply plugin: 'java'
apply plugin: 'maven-publish'


sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}


buildscript {
    repositories {
        maven {
            mavenCentral()
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

dependencies {
    [ null, 'sources', 'javadoc' ].collect {
        compile group: 'org.hyperledger.fabric-sdk-java', name: 'fabric-sdk-java', version: '1.4.0', classifier: it
    }

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.9'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.9'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.8.9'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    testCompile project(':fabric-configurator')
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'com.google.protobuf:protobuf-java:3.0.0'

}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = mavenLocalGroupId

            from components.java
        }
    }
}

sourceSets {
    test {
        proto {
            srcDir 'src/test/proto'
        }
        java {
            srcDirs += "${protobuf.generatedFilesBaseDir}/test/java"
        }
    }    
}

protobuf {
    protoc {artifact = 'com.google.protobuf:protoc:3.0.2'}
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                // To generate deprecated interfaces and static bindService method,
                // turn the enable_deprecated option to true below:
                option 'enable_deprecated=false'
            }
        }
        // generate descriptors:
        all().each { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeImports = true
            task.builtins {
                go { }
            }
        }
    }
}

task copyProtoToChainCodeDirectory(type: Copy) {
    from "build/generated/source/proto/test/go"
    into "../files/chaincode/src/map"
}

testClasses.finalizedBy copyProtoToChainCodeDirectory